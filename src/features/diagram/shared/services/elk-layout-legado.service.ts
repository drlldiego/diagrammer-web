// ===================================================================
// SERVI√áO ELK LAYOUT - VERS√ÉO LEGADA (DOCUMENTADA)
// ===================================================================
// 
// Este ficheiro cont√©m a implementa√ß√£o complexa do layout usando ELK.
// ESTADO: Temporariamente desabilitado por ser demasiado complexo.
// 
// PROBLEMAS IDENTIFICADOS:
// 1. üî¥ Mais de 1400 linhas de c√≥digo complexo
// 2. üî¥ M√∫ltiplas camadas de abstra√ß√£o desnecess√°rias
// 3. üî¥ Dif√≠cil de debuggar e modificar
// 4. üî¥ Muitas funcionalidades que n√£o funcionam bem
// 5. üî¥ Performance question√°vel
// 6. üî¥ Manuten√ß√£o custosa
//
// DECIS√ÉO: Substitu√≠do por LayoutSimplesService
// ===================================================================

import { ErEntity, ErRelationship } from '../../er/declarative/er-types';

/**
 * SERVI√áO ELK LAYOUT - VERS√ÉO COMPLEXA
 * 
 * Este servi√ßo tentava implementar layouts inteligentes usando
 * o framework ELK (Eclipse Layout Kernel).
 * 
 * FUNCIONALIDADES QUE TENTAVA IMPLEMENTAR:
 * - Layout radial adaptativo
 * - An√°lise de padr√µes de conectividade  
 * - Posicionamento baseado em hubs
 * - Resolu√ß√£o de colis√µes avan√ßada
 * - Otimiza√ß√£o de conex√µes
 * 
 * RAZ√ïES PARA DESABILITA√á√ÉO:
 * 1. Complexidade excessiva para o benef√≠cio obtido
 * 2. Bugs dif√≠ceis de resolver
 * 3. C√≥digo dif√≠cil de manter
 * 4. Resultados inconsistentes
 * 5. Performance n√£o justifica complexidade
 */
export class ElkLayoutLegadoService {
  
  // ===================================================================
  // AN√ÅLISE DO C√ìDIGO LEGADO
  // ===================================================================
  
  /**
   * M√âTODO PRINCIPAL DO ELK (DESABILITADO)
   * 
   * Este m√©todo era o ponto de entrada principal para o layout ELK.
   * Implementava um pipeline complexo com m√∫ltiplas fases.
   * 
   * FASES DO PIPELINE:
   * 1. An√°lise de conectividade
   * 2. Selec√ß√£o de estrat√©gia
   * 3. Layout radial/for√ßa/hierarchical
   * 4. Resolu√ß√£o de colis√µes
   * 5. Otimiza√ß√£o de posi√ß√µes
   * 6. Valida√ß√£o de bounds
   * 
   * PROBLEMA: Demasiadas fases, cada uma com seus pr√≥prios bugs
   */
  async applyLayout_DESABILITADO(
    entities: ErEntity[], 
    relationships: ErRelationship[], 
    options: any
  ): Promise<any> {
    console.log('‚ö†Ô∏è [ELK Legado] Este m√©todo est√° desabilitado');
    console.log('üí° [ELK Legado] Use LayoutSimplesService em vez deste');
    
    return {
      success: false,
      reason: 'ELK desabilitado por complexidade excessiva',
      nodes: new Map()
    };
  }

  /**
   * AN√ÅLISE DE CONECTIVIDADE (COMPLEXA DEMAIS)
   * 
   * Tentava analisar padr√µes de conex√µes para decidir layout:
   * - Identificar hubs (entidades muito conectadas)
   * - Encontrar cadeias lineares  
   * - Detectar clusters densos
   * - Isolar elementos √≥rf√£os
   * 
   * PROBLEMA: L√≥gica complexa que raramente funcionava bem
   * SOLU√á√ÉO: Layout simples que funciona sempre
   */
  private analyzeConnectivityPatterns_COMPLEXO_DEMAIS(
    entities: ErEntity[], 
    relationships: ErRelationship[]
  ): any {
    console.log('üî¥ [ELK Legado] An√°lise de conectividade era demasiado complexa');
    
    // Esta fun√ß√£o tinha 200+ linhas de l√≥gica complexa
    // que tentava ser "inteligente" mas criava mais problemas
    
    return {
      hubs: [],
      chains: [],
      clusters: [],
      isolated: [],
      overallPattern: 'unknown',
      recommendedStrategy: 'simple-grid' // A √∫nica que funciona bem
    };
  }

  /**
   * LAYOUT RADIAL ADAPTATIVO (MUITOS BUGS)
   * 
   * Tentava posicionar elementos em c√≠rculos conc√™ntricos
   * baseado na an√°lise de conectividade.
   * 
   * BUGS CONHECIDOS:
   * - Entidades sobrepostas
   * - Posi√ß√µes negativas
   * - Elementos fora do canvas
   * - C√°lculos de √¢ngulos incorretos
   * - Colis√µes n√£o resolvidas
   * 
   * TEMPO GASTO A DEBUGGAR: Muitas horas sem sucesso
   */
  private applyAdaptiveRadialLayout_COM_BUGS(
    entities: ErEntity[], 
    relationships: ErRelationship[], 
    analysis: any
  ): any {
    console.log('üêõ [ELK Legado] Layout radial tinha muitos bugs');
    
    // Mais de 400 linhas de c√≥digo que tentava ser inteligente
    // mas criava problemas de sobreposi√ß√£o e posicionamento
    
    return {
      success: false,
      reason: 'Layout radial com bugs de sobreposi√ß√£o',
      nodes: new Map()
    };
  }

  /**
   * RESOLU√á√ÉO DE COLIS√ïES (INEFICAZ)
   * 
   * Tentava resolver sobreposi√ß√µes de entidades atrav√©s de:
   * - Detec√ß√£o de bounding boxes
   * - C√°lculo de for√ßas de repuls√£o
   * - Itera√ß√µes de ajuste posicional
   * 
   * PROBLEMAS:
   * - Converg√™ncia lenta ou inexistente
   * - Criava novas colis√µes ao resolver outras
   * - L√≥gica de stopping criteria inadequada
   * - Performance question√°vel
   */
  private resolveCollisions_INEFICAZ(
    positionsMap: Map<string, any>, 
    iterations: number
  ): any {
    console.log('üîÑ [ELK Legado] Resolu√ß√£o de colis√µes era ineficaz');
    
    // 150+ linhas de f√≠sica simulada que raramente convergia
    // para uma solu√ß√£o satisfat√≥ria
    
    return {
      totalCollisions: 999,
      resolvedCollisions: 0,
      iterations: iterations,
      converged: false
    };
  }

  // ===================================================================
  // LI√á√ïES APRENDIDAS
  // ===================================================================
  
  /**
   * O QUE APRENDEMOS COM O ELK:
   * 
   * ‚ùå ABORDAGENS QUE N√ÉO FUNCIONARAM:
   * 1. Tentar ser demasiado "inteligente"
   * 2. M√∫ltiplas camadas de abstra√ß√£o
   * 3. Algoritmos complexos sem benef√≠cio claro
   * 4. Premature optimization
   * 5. C√≥digo monol√≠tico dif√≠cil de debuggar
   * 
   * ‚úÖ O QUE FUNCIONA MELHOR:
   * 1. Algoritmos simples e previs√≠veis
   * 2. C√≥digo f√°cil de entender e modificar
   * 3. Resultados consistentes
   * 4. Performance adequada sem complexidade
   * 5. Itera√ß√£o incremental de melhorias
   */

  /**
   * RECOMENDA√á√ïES PARA O FUTURO:
   * 
   * 1. üéØ FOCO NA SIMPLICIDADE
   *    - Layout em grade simples funciona para 90% dos casos
   *    - Adicionar complexidade apenas quando necess√°rio
   * 
   * 2. üîß MELHORIA INCREMENTAL  
   *    - Come√ßar com o b√°sico que funciona
   *    - Adicionar funcionalidades uma de cada vez
   *    - Testar cada melhoria isoladamente
   * 
   * 3. üìä M√âTRICAS CLARAS
   *    - Definir o que constitui "sucesso" no layout
   *    - Medir melhorias objectivamente
   *    - N√£o adicionar funcionalidades sem benef√≠cio provado
   * 
   * 4. üõ†Ô∏è MANUTENIBILIDADE
   *    - C√≥digo que qualquer programador pode entender
   *    - Coment√°rios claros sobre decis√µes de design
   *    - Arquitectura modular e test√°vel
   */
}

// ===================================================================
// ESTAT√çSTICAS DO C√ìDIGO ELK LEGADO
// ===================================================================
//
// üìä COMPLEXIDADE:
// - Linhas de c√≥digo: ~1400
// - M√©todos privados: ~25
// - N√≠veis de aninhamento: at√© 6
// - Depend√™ncias: m√∫ltiplas
//
// ‚è±Ô∏è TEMPO DE DESENVOLVIMENTO:
// - Desenvolvimento inicial: muitas horas
// - Debugging: ainda mais horas  
// - Manuten√ß√£o: tempo cont√≠nuo
// - Resultado: funcionalidade inst√°vel
//
// üéØ LI√á√ÉO PRINCIPAL:
// Simplicidade > Complexidade
// Funcionalidade > Intelig√™ncia artificial
// Manutenibilidade > Performance prematura
//
// ===================================================================
// TESTE ABRANGENTE - Nova Sintaxe Simplificada (Arrow Flow)
// TODO: Remover ap√≥s confirma√ß√£o que funciona perfeitamente

import { UnifiedDeclarativeParser } from './unified-parser';

export function testSimplifiedSyntax(): void {
  console.log('üß™ TESTE ABRANGENTE - Sintaxe Simplificada (Arrow Flow)');
  console.log('='.repeat(70));

  const parser = new UnifiedDeclarativeParser();

  // Teste 1: Fluxo linear simples
  console.log('üìù TESTE 1: Fluxo Linear Simples');
  const simpleFlow = `flowchart:
  name: "Fluxo Linear"
  flow: start -> process:"Processar" -> end:"Conclu√≠do"`;

  try {
    console.log('Entrada:', simpleFlow);
    const diagram = parser.parse(simpleFlow);
    console.log(`‚úÖ Resultado: ${diagram.elements.length} elementos, ${diagram.connections.length} conex√µes`);
    console.log('Elementos:', diagram.elements.map(el => `${el.type}:"${el.name}"`).join(' -> '));
  } catch (error) {
    console.error('‚ùå Erro:', error instanceof Error ? error.message : String(error));
  }

  console.log('\n' + '-'.repeat(50));

  // Teste 2: Fluxo com decis√£o e branches
  console.log('üìù TESTE 2: Fluxo com Decis√£o e Branches');
  const branchFlow = `flowchart:
  name: "Fluxo com Decis√£o"
  flow: start -> process:"Inserir dados" -> decision:"Dados v√°lidos?"
  branches:
    - from: "Dados v√°lidos?"
      condition: "Sim"
      flow: process:"Salvar" -> end:"Sucesso"
    - from: "Dados v√°lidos?"
      condition: "N√£o"
      flow: end:"Erro"`;

  try {
    console.log('Entrada:', branchFlow);
    const diagram = parser.parse(branchFlow);
    console.log(`‚úÖ Resultado: ${diagram.elements.length} elementos, ${diagram.connections.length} conex√µes`);
    console.log('Nome:', diagram.name);
    
    console.log('üîó Conex√µes com labels:');
    diagram.connections.forEach(conn => {
      const fromEl = diagram.elements.find(el => el.id === conn.from);
      const toEl = diagram.elements.find(el => el.id === conn.to);
      const label = conn.label ? ` [${conn.label}]` : '';
      console.log(`   "${fromEl?.name}" ‚Üí "${toEl?.name}"${label}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro:', error instanceof Error ? error.message : String(error));
  }

  console.log('\n' + '-'.repeat(50));

  // Teste 3: Fluxo complexo com m√∫ltiplas decis√µes
  console.log('üìù TESTE 3: Fluxo Complexo (Login com Valida√ß√µes)');
  const complexFlow = `flowchart:
  name: "Sistema de Login Avan√ßado"
  flow: start -> process:"Inserir credenciais" -> decision:"Usu√°rio existe?"
  branches:
    - from: "Usu√°rio existe?"
      condition: "N√£o"
      flow: end:"Usu√°rio n√£o encontrado"
    - from: "Usu√°rio existe?"
      condition: "Sim"
      flow: decision:"Senha correta?" -> process:"Verificar 2FA" -> decision:"2FA v√°lido?"
    - from: "Senha correta?"
      condition: "N√£o"
      flow: end:"Senha incorreta"
    - from: "2FA v√°lido?"
      condition: "Sim"
      flow: process:"Fazer login" -> end:"Sucesso"
    - from: "2FA v√°lido?"
      condition: "N√£o"
      flow: end:"2FA inv√°lido"`;

  try {
    console.log('Entrada:', complexFlow);
    const diagram = parser.parse(complexFlow);
    console.log(`‚úÖ Resultado: ${diagram.elements.length} elementos, ${diagram.connections.length} conex√µes`);
    
    console.log('üéØ Elementos processados:');
    diagram.elements.forEach((el, index) => {
      const pos = el.position;
      console.log(`   ${index + 1}. ${el.type}: "${el.name}" [ID: ${el.id}] ‚Üí (${pos?.x}, ${pos?.y})`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro:', error instanceof Error ? error.message : String(error));
  }

  console.log('\n' + '-'.repeat(50));

  // Teste 4: Serializa√ß√£o de volta (Round-trip)
  console.log('üìù TESTE 4: Serializa√ß√£o Round-trip');
  try {
    const originalDiagram = parser.parse(branchFlow);
    const serialized = parser.serialize(originalDiagram, 'yaml');
    console.log('‚úÖ Serializa√ß√£o para YAML simplificado:');
    console.log(serialized);
    
    // Parse de volta
    const reparsedDiagram = parser.parse(serialized);
    console.log(`‚úÖ Re-parse bem-sucedido: ${reparsedDiagram.elements.length} elementos, ${reparsedDiagram.connections.length} conex√µes`);
    
  } catch (error) {
    console.error('‚ùå Erro no round-trip:', error instanceof Error ? error.message : String(error));
  }

  console.log('\n' + '-'.repeat(50));

  // Teste 5: Detec√ß√£o autom√°tica de formato
  console.log('üìù TESTE 5: Detec√ß√£o Autom√°tica de Formato');
  
  // Teste com formato tradicional
  const traditionalFormat = `flowchart:
  name: "Formato Tradicional"
  elements:
    - type: start
      name: "In√≠cio"
    - type: process
      name: "Processar"
  connections:
    - from: 0
      to: 1`;

  try {
    const traditionalDiagram = parser.parse(traditionalFormat);
    console.log('‚úÖ Formato tradicional detectado e processado corretamente');
    console.log(`   ${traditionalDiagram.elements.length} elementos, ${traditionalDiagram.connections.length} conex√µes`);
  } catch (error) {
    console.error('‚ùå Erro no formato tradicional:', error instanceof Error ? error.message : String(error));
  }

  // Teste com formato simplificado
  try {
    const simplifiedDiagram = parser.parse(simpleFlow);
    console.log('‚úÖ Formato simplificado detectado e processado corretamente');
    console.log(`   ${simplifiedDiagram.elements.length} elementos, ${simplifiedDiagram.connections.length} conex√µes`);
  } catch (error) {
    console.error('‚ùå Erro no formato simplificado:', error instanceof Error ? error.message : String(error));
  }

  console.log('\n‚úÖ TESTE SIMPLIFICADO CONCLU√çDO!');
  console.log('üéØ Funcionalidades testadas:');
  console.log('   ‚úì Sintaxe arrow flow (start -> process -> end)');
  console.log('   ‚úì Elementos com nomes customizados process:"Nome"');
  console.log('   ‚úì Branches com condi√ß√µes (Sim/N√£o)');
  console.log('   ‚úì Fluxos complexos com m√∫ltiplas decis√µes');
  console.log('   ‚úì Posicionamento autom√°tico');
  console.log('   ‚úì Serializa√ß√£o round-trip');
  console.log('   ‚úì Detec√ß√£o autom√°tica de formato');
  console.log('='.repeat(70));
}